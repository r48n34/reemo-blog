"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2513],{4137:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(4137));const a={sidebar_position:1},i="Chat GPT NodeJs",s={unversionedId:"notes/Openai/chatGpt_node",id:"notes/Openai/chatGpt_node",title:"Chat GPT NodeJs",description:"Config",source:"@site/docs/notes/Openai/chatGpt_node.md",sourceDirName:"notes/Openai",slug:"/notes/Openai/chatGpt_node",permalink:"/docs/notes/Openai/chatGpt_node",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"notes",previous:{title:"Sub Domain Setting",permalink:"/docs/notes/Linux/Nginx/Sub_Domain"},next:{title:"Chat GPT Python",permalink:"/docs/notes/Openai/chatGpt_python"}},p={},c=[{value:"Config",id:"config",level:2},{value:"Code",id:"code",level:2}],l={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"chat-gpt-nodejs"},"Chat GPT NodeJs"),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("p",null,"Create a api key from here:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"https://platform.openai.com/account/api-keys"),"    "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'showLineNumbers title=".env"',showLineNumbers:!0,title:'".env"'},"OPEN_AI_APIKEY=xxxxxxxxxxxx\n")),(0,o.kt)("p",null,"Then add the library with "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add openai dotenv\n")),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="openat.ts"',showLineNumbers:!0,title:'"openat.ts"'},'import { Configuration, OpenAIApi } from "openai"\nimport * as dotenv from \'dotenv\'\ndotenv.config()\n\nconst configuration = new Configuration({\n  apiKey: process.env.OPEN_AI_APIKEY,\n});\n\nconst openai = new OpenAIApi(configuration);\n\n( async () => {\n    try {\n        const response = await openai.createChatCompletion({\n            model: "gpt-3.5-turbo",\n            messages: [\n                { role: "system", content: "Please ack like a Tom." }, // Role to apply \n                { role: "assistant", content: "Tom is a nice man" },   // References data\n                { role: "user", content: "Hello world, can you make me a joke?" } // User questions\n            ]\n        });\n    \n        // highlight-next-line\n        console.log(response.data.choices[0]); // hello mate\n    }\n    catch (error) {\n        console.log(error);\n    }\n})()\n')))}m.isMDXComponent=!0}}]);