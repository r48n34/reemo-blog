"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2513],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1758:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:1},i="Chat GPT NodeJs",s={unversionedId:"notes/Openai/chatGpt_node",id:"notes/Openai/chatGpt_node",title:"Chat GPT NodeJs",description:"Config",source:"@site/docs/notes/Openai/chatGpt_node.md",sourceDirName:"notes/Openai",slug:"/notes/Openai/chatGpt_node",permalink:"/docs/notes/Openai/chatGpt_node",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"notes",previous:{title:"[Security] ufw",permalink:"/docs/notes/Linux/ufw"},next:{title:"Chat GPT Python",permalink:"/docs/notes/Openai/chatGpt_python"}},c={},p=[{value:"Config",id:"config",level:2},{value:"Code",id:"code",level:2}],l={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"chat-gpt-nodejs"},"Chat GPT NodeJs"),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("p",null,"Create a api key from here:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"https://platform.openai.com/account/api-keys"),"    "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'showLineNumbers title=".env"',showLineNumbers:!0,title:'".env"'},"OPEN_AI_APIKEY=xxxxxxxxxxxx\n")),(0,o.kt)("p",null,"Then add the library with "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add openai dotenv\n")),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="openat.ts"',showLineNumbers:!0,title:'"openat.ts"'},'import { Configuration, OpenAIApi } from "openai"\nimport * as dotenv from \'dotenv\'\ndotenv.config()\n\nconst configuration = new Configuration({\n  apiKey: process.env.OPEN_AI_APIKEY,\n});\n\nconst openai = new OpenAIApi(configuration);\n\n( async () => {\n    try {\n        const response = await openai.createChatCompletion({\n            model: "gpt-3.5-turbo",\n            messages: [\n                { role: "system", content: "Please ack like a Tom." }, // Role to apply \n                { role: "assistant", content: "Tom is a nice man" },   // References data\n                { role: "user", content: "Hello world, can you make me a joke?" } // User questions\n            ]\n        });\n    \n        // highlight-next-line\n        console.log(response.data.choices[0]); // hello mate\n    }\n    catch (error) {\n        console.log(error);\n    }\n})()\n')))}m.isMDXComponent=!0}}]);