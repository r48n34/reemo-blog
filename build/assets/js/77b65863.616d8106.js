"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9656],{4137:(t,e,r)=>{r.d(e,{Zo:()=>l,kt:()=>d});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function s(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=n.createContext({}),p=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):s(s({},e),t)),r},l=function(t){var e=p(t.components);return n.createElement(c.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},b=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),u=p(r),b=a,d=u["".concat(c,".").concat(b)]||u[b]||m[b]||o;return r?n.createElement(d,s(s({ref:e},l),{},{components:r})):n.createElement(d,s({ref:e},l))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,s=new Array(o);s[0]=b;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[u]="string"==typeof t?t:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},2009:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(4137));const o={sidebar_position:2},s="[HASH] bcryptjs",i={unversionedId:"tutorial/Random JS Lib/bcryptjs",id:"tutorial/Random JS Lib/bcryptjs",title:"[HASH] bcryptjs",description:"Basic start up",source:"@site/docs/tutorial/Random JS Lib/bcryptjs.md",sourceDirName:"tutorial/Random JS Lib",slug:"/tutorial/Random JS Lib/bcryptjs",permalink:"/docs/tutorial/Random JS Lib/bcryptjs",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorial",previous:{title:"[xlsx] xlsx",permalink:"/docs/tutorial/Random JS Lib/xlsx"},next:{title:"[DB] pg",permalink:"/docs/tutorial/Random JS Lib/postgres"}},c={},p=[{value:"Basic start up",id:"basic-start-up",level:2},{value:"Hash and compare",id:"hash-and-compare",level:2}],l={toc:p},u="wrapper";function m(t){let{components:e,...r}=t;return(0,a.kt)(u,(0,n.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hash-bcryptjs"},"[HASH]"," bcryptjs"),(0,a.kt)("h2",{id:"basic-start-up"},"Basic start up"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/bcryptjs"},"https://www.npmjs.com/package/bcryptjs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"npm install bcryptjs\nnpm install --save @types/bcryptjs\n")),(0,a.kt)("h2",{id:"hash-and-compare"},"Hash and compare"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server.ts"',title:'"server.ts"'},'import { bcrypt } from \'bcryptjs\';\n\nconst salt = 12; // Default is 10\n\n// hash data\nconst hash: string = bcrypt.hashSync("data_that_want_to_hash", salt);\n\n// compart hashed and incoming data\nconst isMatch: boolean = bcrypt.compareSync("incoming_data", hash);\n')))}m.isMDXComponent=!0}}]);