"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1300],{4137:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(r),c=n,f=u["".concat(l,".").concat(c)]||u[c]||d[c]||s;return r?a.createElement(f,i(i({ref:t},m),{},{components:r})):a.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<s;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},5448:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=r(7462),n=(r(7294),r(4137));const s={sidebar_position:4},i="[Basic] Data method",o={unversionedId:"tutorial/ExpressJs/data_method",id:"tutorial/ExpressJs/data_method",title:"[Basic] Data method",description:"Params",source:"@site/docs/tutorial/ExpressJs/data_method.md",sourceDirName:"tutorial/ExpressJs",slug:"/tutorial/ExpressJs/data_method",permalink:"/docs/tutorial/ExpressJs/data_method",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorial",previous:{title:"[Basic] Router",permalink:"/docs/tutorial/ExpressJs/router"},next:{title:"[Adv] JWT for authentication",permalink:"/docs/tutorial/ExpressJs/jwt"}},l={},p=[{value:"Params",id:"params",level:2},{value:"Single Params",id:"single-params",level:3},{value:"Multi params",id:"multi-params",level:3},{value:"Query",id:"query",level:2},{value:"Single Query",id:"single-query",level:3},{value:"Multi Query",id:"multi-query",level:3},{value:"Body",id:"body",level:2},{value:"Json data",id:"json-data",level:3},{value:"multipart/form-data",id:"multipartform-data",level:3}],m={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"basic-data-method"},"[Basic]"," Data method"),(0,n.kt)("h2",{id:"params"},"Params"),(0,n.kt)("h3",{id:"single-params"},"Single Params"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="[GET] http://localhost:8080/api/13"',showLineNumbers:!0,title:'"[GET]','http://localhost:8080/api/13"':!0},'// Single params\napp.get("/api/:id", function (req: Request, res: Response) {\n  const { id } = req.params; // 13\n  res.json({ data: id });\n});\n')),(0,n.kt)("h3",{id:"multi-params"},"Multi params"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="[GET] http://localhost:8080/api/13/peter"',showLineNumbers:!0,title:'"[GET]','http://localhost:8080/api/13/peter"':!0},'// Single params\napp.get("/api/:id/:name", function (req: Request, res: Response) {\n  const { id, name } = req.params; // 13, peter\n  res.json({ data: id, name: name });\n});\n')),(0,n.kt)("h2",{id:"query"},"Query"),(0,n.kt)("h3",{id:"single-query"},"Single Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumber title="[GET] http://localhost:8080/api?id=14"',showLineNumber:!0,title:'"[GET]',"http://localhost:8080/api?id":'14"'},'// Single Query\napp.get("/api", function (req: Request, res: Response) {\n  const { id } = req.query; // 14\n  res.json({ data: id });\n});\n')),(0,n.kt)("h3",{id:"multi-query"},"Multi Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="[GET] http://localhost:8080/api?id=14&name=tom"',showLineNumbers:!0,title:'"[GET]',"http://localhost:8080/api?id":"14&name"},'// Single params\napp.get("/api/:id/:name", function (req: Request, res: Response) {\n  const { id, name } = req.query; // 14, tom\n  res.json({ data: id, name: name });\n});\n')),(0,n.kt)("h2",{id:"body"},"Body"),(0,n.kt)("h3",{id:"json-data"},"Json data"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumber title="server.ts"',showLineNumber:!0,title:'"server.ts"'},"// Add these line to your server\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="[POST] http://localhost:8080/api"',showLineNumbers:!0,title:'"[POST]','http://localhost:8080/api"':!0},"app.post('/api', function (req, res) {\n  console.log(req.body);\n  res.json({ data: id, name: name });\n});\n")),(0,n.kt)("h3",{id:"multipartform-data"},"multipart/form-data"),(0,n.kt)("p",null,"With ",(0,n.kt)("inlineCode",{parentName:"p"},"formidable"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/formidable#readme"},"https://www.npmjs.com/package/formidable#readme"),"  "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="formidable.ts"',showLineNumbers:!0,title:'"formidable.ts"'},'import path from "path"\nimport fs from "fs"\nimport formidable, { Fields, Files } from "formidable";\nimport IncomingForm from "formidable/Formidable";\nimport { Request } from "express"\n\n// Create a folder if not exist\nconst uploadDir = "uploads"\nconst finalDir = path.join(__dirname, "..", uploadDir)\nif (!fs.existsSync(finalDir)) {\n    fs.mkdirSync(finalDir)\n}\n\nexport const form = formidable({ \n    multiples: true,\n    uploadDir: finalDir,\n    keepExtensions: true,\n    maxFileSize: 1024 * 1024 * 20, // (20mb)\n    maxFiles: 1,\n    filter: part => part.mimetype?.startsWith(\'image/\') || false,\n    filename: (originalName, originalExt, part, form) => {\n        const ext = part.mimetype?.split("/").pop();\n        return `${part.name}-${Date.now()}.${ext}`;\n    },\n});\n\nexport function formParse(form: IncomingForm, req: Request) {\n    return new Promise<{ fields: Fields; files: Files }>((resolve, reject) => {\n      form.parse(req, (err, fields, files) => {\n        if (err) {\n          reject(err);\n        } \n        resolve({ fields, files });\n      });\n    });\n}\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'showLineNumbers title="server.ts"',showLineNumbers:!0,title:'"server.ts"'},"import { formParse } from \"formidable\"\n\n// [POST] http://localhost:8080/data\napp.post('/data', async (req: express.Request, res: express.Response) => {\n  try{\n    const data = await formParse(form, req);\n    \n    return res.status(200).json({ \n      status: true,\n      bodyData:  data.fields, // data.fields : The original form data (No Files)\n      filesData: data.files   // data.files : The media file data from form (Files)\n    })\n  }\n  catch(err:any){\n    return res.status(200).json({ status: false })\n  }  \n});\n")))}d.isMDXComponent=!0}}]);